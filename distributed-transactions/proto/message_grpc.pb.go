// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/message.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bank_CoordSendCommand_FullMethodName  = "/Message.Bank/CoordSendCommand"
	Bank_ServerSendCommand_FullMethodName = "/Message.Bank/ServerSendCommand"
	Bank_SendPrepare_FullMethodName       = "/Message.Bank/SendPrepare"
	Bank_SendCommit_FullMethodName        = "/Message.Bank/SendCommit"
	Bank_SendAbort_FullMethodName         = "/Message.Bank/SendAbort"
	Bank_Ping_FullMethodName              = "/Message.Bank/Ping"
)

// BankClient is the client API for Bank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankClient interface {
	CoordSendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	ServerSendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	SendPrepare(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error)
	SendCommit(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error)
	SendAbort(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type bankClient struct {
	cc grpc.ClientConnInterface
}

func NewBankClient(cc grpc.ClientConnInterface) BankClient {
	return &bankClient{cc}
}

func (c *bankClient) CoordSendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Bank_CoordSendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) ServerSendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Bank_ServerSendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) SendPrepare(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, Bank_SendPrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) SendCommit(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, Bank_SendCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) SendAbort(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, Bank_SendAbort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Bank_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServer is the server API for Bank service.
// All implementations must embed UnimplementedBankServer
// for forward compatibility
type BankServer interface {
	CoordSendCommand(context.Context, *Command) (*Response, error)
	ServerSendCommand(context.Context, *Command) (*Response, error)
	SendPrepare(context.Context, *Transaction) (*Exception, error)
	SendCommit(context.Context, *Transaction) (*Exception, error)
	SendAbort(context.Context, *Transaction) (*Exception, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedBankServer()
}

// UnimplementedBankServer must be embedded to have forward compatible implementations.
type UnimplementedBankServer struct {
}

func (UnimplementedBankServer) CoordSendCommand(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoordSendCommand not implemented")
}
func (UnimplementedBankServer) ServerSendCommand(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerSendCommand not implemented")
}
func (UnimplementedBankServer) SendPrepare(context.Context, *Transaction) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrepare not implemented")
}
func (UnimplementedBankServer) SendCommit(context.Context, *Transaction) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommit not implemented")
}
func (UnimplementedBankServer) SendAbort(context.Context, *Transaction) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAbort not implemented")
}
func (UnimplementedBankServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBankServer) mustEmbedUnimplementedBankServer() {}

// UnsafeBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServer will
// result in compilation errors.
type UnsafeBankServer interface {
	mustEmbedUnimplementedBankServer()
}

func RegisterBankServer(s grpc.ServiceRegistrar, srv BankServer) {
	s.RegisterService(&Bank_ServiceDesc, srv)
}

func _Bank_CoordSendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).CoordSendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_CoordSendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).CoordSendCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_ServerSendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).ServerSendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_ServerSendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).ServerSendCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_SendPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).SendPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_SendPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).SendPrepare(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_SendCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).SendCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_SendCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).SendCommit(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_SendAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).SendAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_SendAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).SendAbort(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bank_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Bank_ServiceDesc is the grpc.ServiceDesc for Bank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Message.Bank",
	HandlerType: (*BankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoordSendCommand",
			Handler:    _Bank_CoordSendCommand_Handler,
		},
		{
			MethodName: "ServerSendCommand",
			Handler:    _Bank_ServerSendCommand_Handler,
		},
		{
			MethodName: "SendPrepare",
			Handler:    _Bank_SendPrepare_Handler,
		},
		{
			MethodName: "SendCommit",
			Handler:    _Bank_SendCommit_Handler,
		},
		{
			MethodName: "SendAbort",
			Handler:    _Bank_SendAbort_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Bank_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}
